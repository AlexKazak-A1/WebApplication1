@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    ViewData["Title"] = "Create new Cluster";    
}

@model ProvisionModel

<div id="cluster-block">
    <h2>Create new Rancher Cluster</h2>
    <br />
    <div>
        <label id="text" style="margin:auto">Select Rancher and Proxmox to start deployment</label>
    </div>
    <form>
        <div class="container">
            <div class="column">
                <label for="rancherTemplates">Select Rancher:</label>
                <select name="rancherTemplates" id="select-rancher-template">
                    <option value="">Data loading...</option>
                </select>
            </div>
            <div class="column">
                <label for="proxmoxTemplates">Select Proxmox:</label>
                <select name="proxmoxTemplates" id="select-proxmox-template">
                    <option value="">Data loading...</option>
                </select>
            </div>
        </div>
    </form>

    <div>
        <label id="text" style="margin:auto">Select the required number of components to create a cluster</label>
    </div>
    <form>
        <div class="container">
            <div class="column">
                <label for="etcdAndCPNumber">etcd and Control Plane</label>
                <input type="number" id="etcdAndCPNumber" name="etcdAndCPNumber" placeholder="0" asp-for="NumberOfETCDAndControlPlane">
            </div>
            <div class="column">
                <label for="workerNumber">Worker</label>
                <input type="number" id="workerNumber" name="workerNumber" min="1" max="50" placeholder="0" asp-for="numberOfWorker">
            </div>
            <div class="column">
                <label for="vmStartIndex">VM`s Start index</label>
                <input type="number" id="vmStartIndex" name="vmStartIndex" placeholder="100" min="100" max="999999999" />
            </div>
        </div>
        <div class="container" id="vmProvisionRange">

        </div>
    </form>
    <form>
        <label for="select-vm-template">Select a tamplate for provision VM</label>
        <select name="templates" id="select-vm-template">
            <option value="">Will appear after Proxmox select</option>
        </select>
        <div class="container" id="templateParams">
            
        </div>
    </form>
    <div>
        <label for="clusterName">Cluster Name:</label>
        <input type="text" id="clusterName" required />
        <button type="button" id="createRancherClusterButtonTest" onclick="createCluster()" disabled>Create Cluster Test</button>
    </div>

    <div id="notification" class="notification"></div>
</div>

<script>
    const workerInput = document.getElementById('workerNumber');
    workerInput.addEventListener('input', function (event) {
        clearTimeout(timer);
        timer = setTimeout(() => {
              // Logic to execute when the user finishes typing
            const numberInput = event.target.value;
            console.log("User finished input:", numberInput);
            // Perform your validation or processing here
            if (this.value < 1 || this.value > 50) {
                this.value = '';
                showNotification(105,'Value must be in [1..50]');
            }            
        }, 1000);
        
    });

    const etcdAndCPInput = document.getElementById('etcdAndCPNumber');
    etcdAndCPInput.addEventListener('input', function (event) {
        clearTimeout(timer);
        timer = setTimeout(() => {
             // Logic to execute when the user finishes typing
            const numberInput = event.target.value;
            console.log("User finished input:", numberInput);
            // Perform your validation or processing here
            let number = parseInt(this.value, 10);
            if ( number != 1 && number != 3 || this.value == '' ) {
                this.value = '';
                showNotification(105,'Only 1 or 3 Amount enabeled');
            }
        }, 1000);
        
    });

    let timer;

    const vmStartIndex = document.getElementById('vmStartIndex');
    vmStartIndex.addEventListener('input', function (event) {
        clearTimeout(timer); // Clear the previous timer
        timer = setTimeout(() => {
            // Logic to execute when the user finishes typing
            const numberInput = event.target.value;
            console.log("User finished input:", numberInput);
            // Perform your validation or processing here
            let number = parseInt(numberInput, 10);
            if ( number < 100 || number > 999999999 ) {
                this.value = '';
                showNotification(105,'Available range is [100..999999999]');
            }

        }, 1000); // Adjust the delay (in milliseconds) as needed        
    });

    document.addEventListener('DOMContentLoaded', () => {
        const rancherSelect = document.getElementById('select-rancher-template');
        const proxmoxSelect = document.getElementById('select-proxmox-template');
        const templateSelect = document.getElementById('select-vm-template');
        const clusterNameInput = document.getElementById('clusterName');
        const workerInput = document.getElementById('workerNumber');
        const etcdAndCPInput = document.getElementById('etcdAndCPNumber');        

        const clusterCreateButton = document.getElementById('createRancherClusterButtonTest');

        async function checkSelections() {
            const rancherValue = rancherSelect.value;
            const proxmoxValue = proxmoxSelect.value;
            
            if (proxmoxValue === '') {
                templateSelect.innerHTML = ''; // Clear existing options

                const defaultOption = document.createElement('option');

                defaultOption.place
                defaultOption.value = '';
                defaultOption.textContent = 'Select Proxmox First';
                templateSelect.appendChild(defaultOption);
            }

            if (rancherValue) {
                console.log('Rancher selections are made:', {
                    rancher: rancherValue
                });
            }

            if (proxmoxValue) {
                // Both select elements have a selected value
                console.log('Proxmox selections are made:', {                  
                    proxmox: proxmoxValue                   
                });

                let number = parseInt(proxmoxValue, 10);
                let data = {
                    proxmoxId: number,
                }
                await CreateProvisionBlock(baseURL, data);
                // Call your function here
                getTemplates(baseURL + 'api/Proxmox/GetTemplate', 'select-vm-template', data);
            }
        }

        async function updateButtonState() {
            const allSelected = 
                rancherSelect.value &&
                proxmoxSelect.value &&
                templateSelect.value &&
                clusterNameInput.value.trim() &&
                workerInput.value.trim() && 
                etcdAndCPInput.value.trim() &&
                vmStartIndex.value.trim();
                
            clusterCreateButton.disabled = !allSelected;
        }

        async function showTemplateParams() {
            const templateParams = document.getElementById('templateParams');

            if (templateSelect.value === '') {
                templateParams.innerHTML = '';
            }
            else {                
                templateParams.innerHTML = `
                <div>
                <label>If need change worker properties</label>
                </div>
                    <div class="column">
                        <label for="workerCPU">CPU: </label>
                        <input type="number" id="workerCPU" name="workerCPU" step="1"/>                        
                    </div>
                    <div class="column">
                        <label for="workerRAM">RAM:</label>
                        <input type="number" id="workerRAM" name="workerRAM" step="0.5"/>
                        <label for="workerRAM"> GB</label>
                    </div>
                    <div class="column">
                        <label for="workerHDD">HDD:</label>
                        <input type="number" id="workerHDD" name="workerHDD" step="5"/>
                        <label for="workerHDD"> GB</label>
                    </div>
                `;

                await getTemplateParams();
            }
        }

        async function getTemplateParams() {
            const workerCPU = document.getElementById('workerCPU');
            const workerRAM = document.getElementById('workerRAM');
            const workerHDD = document.getElementById('workerHDD');

            let templateID = parseInt(templateSelect.value, 10);
            let proxmoxId = parseInt(proxmoxSelect.value, 10);

            const url = baseURL + 'api/Proxmox/GetTemplateParams';
            const data ={
                proxmoxid: proxmoxId,
                templateid: templateID,
            }


            const result = await postToController(url, data);

            if (result.value)
            {
                workerCPU.value = result.value.cpu;
                workerRAM.value = parseFloat(result.value.ram).toFixed(1);
                workerHDD.value = parseFloat(result.value.hdd).toFixed(1);
            }
        }

        // Add event listeners to All select elements
        [rancherSelect, proxmoxSelect].forEach(element => {
            if (element) { 
                // Ensure the element is not null
                element.addEventListener('change', updateButtonState);
                element.addEventListener('change', checkSelections);
            } else {
                console.error('An element is missing from the DOM:', element);
            }
        });

        [clusterNameInput, workerInput, etcdAndCPInput, vmStartIndex].forEach(element => {
            if (element) {
                // Ensure the element is not null
                element.addEventListener('input', updateButtonState);
                element.addEventListener('change', updateButtonState);
            } else {
                console.error('An element is missing from the DOM:', element);
            }
        });

        templateSelect.addEventListener('input', updateButtonState);
        templateSelect.addEventListener('change', updateButtonState);
        templateSelect.addEventListener('change', showTemplateParams);
                
        //clusterNameInput.addEventListener('input', updateButtonState);
        // rancherSelect.addEventListener('change', checkSelections);
        // proxmoxSelect.addEventListener('change', checkSelections);

    });

    window.onload = async () => {

        const ConnectionType = {
            Rancher: 0,
            Proxmox: 1
        };
        // getTemplates('/Proxmox/GetTemplate', 'select-template','');
        await getTemplates(baseURL + 'api/Provision/GetConnectionCreds', 'select-rancher-template', {connectiontype: ConnectionType.Rancher});
        await getTemplates(baseURL + 'api/Provision/GetConnectionCreds', 'select-proxmox-template', {connectiontype: ConnectionType.Proxmox});

    };

    async function createCluster() {
        try {

            const select = document.getElementById('select-rancher-template');
            const selectedValue = select.value;

            const name = document.getElementById('clusterName');
            const clusterName = name.value;

            const selectProxmox = document.getElementById('select-proxmox-template');
            const selectedProxmoxValue = selectProxmox.value;

            const amountOfWorkers = document.getElementById('workerNumber');
            const amount = amountOfWorkers.value;

            const template = document.getElementById('select-vm-template');
            const templateName = template.options[template.selectedIndex].text;

            const etcdAndCPInput = document.getElementById('etcdAndCPNumber');
            const etcdCPAmount = etcdAndCPInput.value;

            const vmStartIndex = document.getElementById('vmStartIndex');
            const startIndexValue = vmStartIndex.value;

            //const vmPrefixInput = document.getElementById('vmPrefixInput');
            //let vmPrefixValue = vmPrefixInput.value;

            const workerCPU = document.getElementById('workerCPU');
            const workerCPUValue = workerCPU.value;

            const workerRAM = document.getElementById('workerRAM');
            const workerRAMValue = workerRAM.value;

            const workerHDD = document.getElementById('workerHDD');
            const workerHDDValue = workerHDD.value;

            let templateID = parseInt(template.value, 10);
            let proxmoxId = parseInt(selectedProxmoxValue, 10);

            let url = baseURL + 'api/Proxmox/GetTemplateParams';
            const info ={
                proxmoxid: proxmoxId,
                templateid: templateID,
            }


            let result = await postToController(url, info);

            let hostsEtcd = GetSelectedCheckboxes('master');
            let hostsWorker = GetSelectedCheckboxes('worker');
            let storages = GetSelectedCheckboxes('storage');

            let data = {
                etcdAndControlPlaneAmount: etcdCPAmount,
                workerAmount: amount,
                proxmoxId: selectedProxmoxValue,
                vmTemplateName: templateName,
                rancherId: selectedValue,
                clusterName: clusterName,
                vmStartIndex: startIndexValue,
                vmPrefix: clusterName,
                vmConfig:
                {
                    cpu: workerCPUValue,
                    ram: workerRAMValue,
                    hdd: workerHDDValue
                },
                etcdConfig:
                {
                    cpu: result.value.cpu,
                    ram: result.value.ram,
                    hdd: result.value.hdd
                },
                etcdProvisionRange: hostsEtcd,
                workerProvisionRange: hostsWorker,
                selectedStorage: storages,
                provisionSchema: {}
            }

            let isCreationAvailable = await GetCreationAvailibility(data);      
            
            if (!isCreationAvailable.status)
            {
                return;
            }

            let provisioningSchema = isCreationAvailable.data;

            let isClasterCreated = false;

            url = baseURL +  'api/Provision/CreateClaster';
            let clusterInfo = {
                RancherId: selectedValue,
                ClusterName: clusterName
            }

            result = await postToController(url, clusterInfo)
                .then(data => {
                    showNotification(data.value.status, data.value.message);
                    if (data.value.status === 200) {
                        isClasterCreated = true;
                    }
                    return data;
                });

            if ((result.value.status === 200 && isClasterCreated) || result.value.status === 409) {   //  (true) {

                //showNotification(105, 'Test cluster creation started.\n Used only for Proxmox Provision test');
                //await wait(5);

                

                const clusterInfo = {
                    rancherId: selectedValue,
                    clusterName: clusterName,
                }

                const connString = await GetConnectionStringToRancher(clusterInfo);

                
                data.provisionSchema = provisioningSchema;
                let vmIDs = await startCreatingProxmoxVMs(data);  //   <--  Remove comment to start proxmox privision

                //if (connString !== '' && vmIDs.length > 0) {
                //    await StartVMsAndConnectToRuncher(connString, vmIDs);
                //}
                //let connString = 'test';
                //vmIDs = [100, 101];
                await StartVMsAndConnectToRuncher(connString, vmIDs, selectedProxmoxValue);
            }
        }
        catch (error) {
            console.error('Connection error:', error);
        }
    }

    async function GetCreationAvailibility(data) {

        showNotification(100, 'Creation params checking started');

        const url = baseURL + 'api/Provision/GetCreationAvailibility';

        let res = await postToController(url, data)
            .then(result => {    
                if (result.value.status == 200) {
                    showNotification(result.value.status, result.value.message);
                    return info = {
                        status: true,
                        data: result.value.data
                    };
                }
                else {
                    showNotification(result.value.status, result.value.message);
                }
                return info = {
                        status: false                        
                    };
            });

            return res;
    }

    async function StartVMsAndConnectToRuncher(connString, vmIDs, proxmoxId) {

        showNotification(100, 'Connection of VM`s started');

        const url = baseURL + 'api/Provision/StartVMAndConnectToRancher';
        //const data = {
        //    connectionString: connString,
        //    vmsId: vmIDs
        //}

        const data = {
            connectionString: connString,
            vmsId: vmIDs,
            proxmoxId: proxmoxId
        }

        let res = await postToController(url, data)
            .then(data => {
               let result = [];

                // Проверка на существование данных и массива в свойстве "value"
                if (data && Array.isArray(data.value)) {
                    data.value.forEach(item => {
                        if (item.status === 200) {
                            showNotification(item.status, 'Successfuly added to Rancher VMId =' + item.message);
                            // Добавляем числовое значение из item.message в массив
                            let num = parseInt(item.message, 10);
                            if (!isNaN(num)) {
                                result.push(num);
                            }
                        }
                        else if (item.status === 409) {
                            showNotification(item.status, 'Already exist VM: ' + item.message);
                            // Добавляем числовое значение из item.message в массив
                            let num = parseInt(item.message, 10);
                            if (!isNaN(num)) {
                                result.push(num);
                            }
                        }
                        else {
                            showNotification(item.status, 'Check vmId = ' + item.message);
                        }

                    });
                }
                return result;
            });

        return res;
    }

    async function startCreatingProxmoxVMs(data) {

        showNotification(100, 'Creation of VM`s started');

        //await wait(5);

        const url = baseURL +  'api/Provision/CreateProxmoxVMs';

        let vmIDs = await postToController(url, data)
            .then(data => {
                let result = [];

                // Проверка на существование данных и массива в свойстве "value"
                if (data && Array.isArray(data.value)) {
                    data.value.forEach(item => {
                        if (item.status === 200) {
                            showNotification(item.status, 'Successfuly created VM: ' + item.message);
                            // Добавляем числовое значение из item.message в массив
                            let num = parseInt(item.message, 10);
                            if (!isNaN(num)) {
                                result.push(num);
                            }
                        }
                        else if (item.status === 409) {
                            showNotification(item.status, 'Already exist VM: ' + item.message);
                            // Добавляем числовое значение из item.message в массив
                            let num = parseInt(item.message, 10);
                            if (!isNaN(num)) {
                                result.push(num);
                            }
                        }
                        else {
                            showNotification(item.status, item.message);
                        }

                    });
                }
                return result; // Return array of vmIDs
            });

        return vmIDs;
    }

    async function GetConnectionStringToRancher(data) {

        const url = baseURL + 'api/Provision/GetConnectionStringToRancher';

        let result = await postToController(url, data)
            .then(data => {
                // Extract the array from the "value" property
                if (data.value.status === 200) {
                    return data.value.message;
                }
            });

        return result;
    }

    
</script>